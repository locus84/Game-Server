@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using GameServer.SharedKernel
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" Model="registerParameters">
            @*<MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />*@
            <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!" @bind-Value="registerParameters.UserName"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                          InputType="InputType.Password" @bind-Value="registerParameters.Password"
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Password is required!" />
            <MudTextField T="string" Label="Password" HelperText="Repeat the password"  @bind-Value="registerParameters.PasswordConfirm"
                InputType="InputType.Password" Validation="@(new Func<string, string>(PasswordMatch!))" />
@*            <div class="d-flex">
                <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                    <MudRadio Option="@("Personal")">Personal</MudRadio>
                    <MudRadio Option="@("Professional")">Professional</MudRadio>
                </MudRadioGroup>
            </div>*@
            <div class="d-flex align-center justify-space-between">
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree" />
            </div>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Register</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    
    void Cancel() => MudDialog?.Cancel();

    bool success;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (pwField1?.Value != arg)
            return "Passwords don't match";
        return null;
    }
    
    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string? error { get; set; }

    async Task Submit()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

        MudDialog?.Close(DialogResult.Ok(true));
    }
}
