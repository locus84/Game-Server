@page "/Messages/Inboxes"

@attribute [Authorize(Roles = "Admin")]

@using System.Reflection
@using GameServer.Client.Services.Contracts
@using GameServer.SharedKernel.ApiModels
@using GameServer.Client.Helpers
@inject IDialogService DialogService
@inject IInboxService InboxService

<MudDataGrid ColumnResizeMode="ResizeMode.Container" @ref="DataGrid" T="InboxDTO" Items="@InboxList" ReadOnly="false"
             EditMode="DataGridEditMode.Form" MultiSelection="true" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">
    <ToolBarContent>
        <MudButton OnClick="@AddItem" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>
        <MudButton Disabled="@(RowsSelected <= 0)" OnClick="@RemoveItem" Color="@Color.Error" Class="remove-item-btn">Remove Items</MudButton>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="InboxDTO"></SelectColumn>
        <PropertyColumn Property="x => x!.Id" IsEditable="false"/>
        <PropertyColumn Property="x => x!.Title" Resizable="true"/>
        <PropertyColumn Property="x => x!.Text" Resizable="true"/>

        <TemplateColumn CellClass="justify-end" StickyRight="true" Resizable="true">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {

    MudDataGrid<InboxDTO>? DataGrid { get; set; }

    private List<InboxDTO>? InboxList = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await InboxService.ListAsync();
        if (result.IsSuccess)
        {
            InboxList = result.Value.ToList();
        }

        result.ShowMessageOnFailure(DialogService);
    }

    public int RowsSelected => DataGrid?.SelectedItems.Count ?? 0;

    async Task CommittedItemChanges(InboxDTO inboxDto)
    {
        var result = await InboxService.UpdateAsync(inboxDto);

        if (result.IsSuccess)
        {
            InboxList?.RemoveAll(x => x.Id == inboxDto.Id);
            InboxList?.Add(inboxDto);
        }

        result.ShowMessageOnFailure(DialogService);
    }

    async Task AddItem()
    {
        var result = await InboxService.CreateAsync(new InboxDTO
        {
            Text = "Message 1"
        });

        if (result.IsSuccess)
        {
            InboxList?.Add(result.Value);

            DataGrid?.SetEditingItemAsync(result.Value);
        }

        result.ShowMessageOnFailure(DialogService);
    }

    async Task RemoveItem()
    {
        if (RowsSelected > 0)
        {
            var delete = await DialogService.ShowMessageBox("Delete",
                $"Do you want to delete {RowsSelected} rows?", yesText: "Delete", cancelText: "Cancel");
            if (delete == true)
            {
                foreach (var ad in DataGrid?.SelectedItems!)
                {
                    var result = await InboxService.DeleteAsync(ad.Id);

                    if (result.IsSuccess)
                    {
                        InboxList?.RemoveAll(x => x.Id == ad.Id);
                    }

                    result.ShowMessageOnFailure(DialogService);
                }
            }
        }
    }
}